// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!
pragma solidity >=0.8.4 <0.9.0;

interface DeltaNeutralPancakeMCV2Worker02Like {
  error DeltaNeutralPancakeMCV2Worker02_BadTreasuryAccount();
  error DeltaNeutralPancakeMCV2Worker02_ExceedReinvestBounty();
  error DeltaNeutralPancakeMCV2Worker02_ExceedReinvestBps();
  error DeltaNeutralPancakeMCV2Worker02_InvalidReinvestPath();
  error DeltaNeutralPancakeMCV2Worker02_InvalidReinvestPathLength();
  error DeltaNeutralPancakeMCV2Worker02_InvalidRewardToken();
  error DeltaNeutralPancakeMCV2Worker02_InvalidTokens();
  error DeltaNeutralPancakeMCV2Worker02_NotAllowToLiquidate();
  error DeltaNeutralPancakeMCV2Worker02_NotEOA();
  error DeltaNeutralPancakeMCV2Worker02_NotOperator();
  error DeltaNeutralPancakeMCV2Worker02_NotReinvestor();
  error DeltaNeutralPancakeMCV2Worker02_NotWhitelistedCaller();
  error DeltaNeutralPancakeMCV2Worker02_UnApproveStrategy();
  error DeltaNeutralPancakeMCV2Worker02_UnTrustedPrice();
  event BeneficialVaultTokenBuyback(address indexed caller, address indexed beneficialVault, uint256 indexed buyback);
  event MasterChefDeposit(uint256 lpAmount);
  event MasterChefWithdraw(uint256 lpAmount);
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  event Reinvest(address indexed caller, uint256 reward, uint256 bounty);
  event SetBeneficialVaultConfig(
    address indexed caller,
    uint256 indexed beneficialVaultBountyBps,
    address indexed beneficialVault,
    address[] rewardPath
  );
  event SetCriticalStrategy(address indexed caller, address indexed addStrat);
  event SetMaxReinvestBountyBps(address indexed caller, uint256 indexed maxReinvestBountyBps);
  event SetReinvestConfig(
    address indexed caller,
    uint256 reinvestBountyBps,
    uint256 reinvestThreshold,
    address[] reinvestPath
  );
  event SetReinvestorOK(address indexed caller, address indexed reinvestor, bool indexed isOk);
  event SetRewardPath(address indexed caller, address[] newRewardPath);
  event SetStrategyOK(address indexed caller, address indexed strategy, bool indexed isOk);
  event SetTreasuryConfig(address indexed caller, address indexed account, uint256 bountyBps);
  event SetWhitelistedCallers(address indexed caller, address indexed whitelistUser, bool indexed isOk);

  function addStrat() external view returns (address);

  function baseToken() external view returns (address);

  function beneficialVault() external view returns (address);

  function beneficialVaultBountyBps() external view returns (uint256);

  function buybackAmount() external view returns (uint256);

  function cake() external view returns (address);

  function factory() external view returns (address);

  function farmingToken() external view returns (address);

  function getPath() external view returns (address[] memory);

  function getReinvestPath() external view returns (address[] memory);

  function getReversedPath() external view returns (address[] memory);

  function getRewardPath() external view returns (address[] memory);

  function health(uint256) external view returns (uint256);

  function initialize(
    address _operator,
    address _baseToken,
    address _masterChef,
    address _router,
    uint256 _pid,
    address _addStrat,
    uint256 _reinvestBountyBps,
    address _treasuryAccount,
    address[] memory _reinvestPath,
    uint256 _reinvestThreshold,
    address _priceOracle
  ) external;

  function liquidate(uint256) external;

  function lpToken() external view returns (address);

  function masterChef() external view returns (address);

  function masterChefV2() external view returns (address);

  function maxReinvestBountyBps() external view returns (uint256);

  function okReinvestors(address) external view returns (bool);

  function okStrats(address) external view returns (bool);

  function operator() external view returns (address);

  function owner() external view returns (address);

  function pid() external view returns (uint256);

  function priceOracle() external view returns (address);

  function reinvest() external;

  function reinvestBountyBps() external view returns (uint256);

  function reinvestPath(uint256) external view returns (address);

  function reinvestThreshold() external view returns (uint256);

  function renounceOwnership() external;

  function rewardPath(uint256) external view returns (address);

  function router() external view returns (address);

  function setBeneficialVaultConfig(
    uint256 _beneficialVaultBountyBps,
    address _beneficialVault,
    address[] memory _rewardPath
  ) external;

  function setCriticalStrategies(address _addStrat) external;

  function setMaxReinvestBountyBps(uint256 _maxReinvestBountyBps) external;

  function setPriceOracle(address _priceOracle) external;

  function setReinvestConfig(
    uint256 _reinvestBountyBps,
    uint256 _reinvestThreshold,
    address[] memory _reinvestPath
  ) external;

  function setReinvestorOk(address[] memory reinvestors, bool isOk) external;

  function setRewardPath(address[] memory _rewardPath) external;

  function setStrategyOk(address[] memory strats, bool isOk) external;

  function setTreasuryConfig(address _treasuryAccount, uint256 _treasuryBountyBps) external;

  function setWhitelistedCallers(address[] memory callers, bool isOk) external;

  function totalLpBalance() external view returns (uint256);

  function transferOwnership(address newOwner) external;

  function treasuryAccount() external view returns (address);

  function treasuryBountyBps() external view returns (uint256);

  function wNative() external view returns (address);

  function whitelistCallers(address) external view returns (bool);

  function work(
    uint256,
    address user,
    uint256 debt,
    bytes memory data
  ) external;
}
