// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!
pragma solidity >=0.8.4 <0.9.0;

interface SimpleVaultConfigLike {
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  function acceptDebt(address worker) external view returns (bool);

  function approvedAddStrategies(address) external view returns (bool);

  function getFairLaunchAddr() external view returns (address);

  function getInterestRate(uint256, uint256) external view returns (uint256);

  function getKillBps() external view returns (uint256);

  function getKillTreasuryBps() external view returns (uint256);

  function getReservePoolBps() external view returns (uint256);

  function getTreasuryAddr() external view returns (address);

  function getWNativeRelayer() external view returns (address);

  function getWrappedNativeAddr() external view returns (address);

  function initialize(
    uint256 _minDebtSize,
    uint256 _interestRate,
    uint256 _reservePoolBps,
    uint256 _killBps,
    address _getWrappedNativeAddr,
    address _getWNativeRelayer,
    address _getFairLaunchAddr,
    uint256 _getKillTreasuryBps,
    address _treasury
  ) external;

  function interestRate() external view returns (uint256);

  function isWorker(address worker) external view returns (bool);

  function isWorkerReserveConsistent(address worker) external view returns (bool);

  function isWorkerStable(address worker) external view returns (bool);

  function killFactor(address worker, uint256) external view returns (uint256);

  function minDebtSize() external view returns (uint256);

  function owner() external view returns (address);

  function rawKillFactor(address worker, uint256) external view returns (uint256);

  function renounceOwnership() external;

  function setApprovedAddStrategy(address[] memory addStrats, bool ok) external;

  function setParams(
    uint256 _minDebtSize,
    uint256 _interestRate,
    uint256 _reservePoolBps,
    uint256 _killBps,
    address _getWrappedNativeAddr,
    address _getWNativeRelayer,
    address _getFairLaunchAddr,
    uint256 _getKillTreasuryBps,
    address _treasury
  ) external;

  function setWhitelistedCallers(address[] memory callers, bool ok) external;

  function setWhitelistedLiquidators(address[] memory callers, bool ok) external;

  function setWorker(
    address worker,
    bool _isWorker,
    bool _acceptDebt,
    uint256 _workFactor,
    uint256 _killFactor,
    bool _isStable,
    bool _isReserveConsistent
  ) external;

  function transferOwnership(address newOwner) external;

  function treasury() external view returns (address);

  function whitelistedCallers(address) external view returns (bool);

  function whitelistedLiquidators(address) external view returns (bool);

  function workFactor(address worker, uint256) external view returns (uint256);

  function workers(address)
    external
    view
    returns (
      bool isWorker,
      bool acceptDebt,
      uint256 workFactor,
      uint256 killFactor,
      bool isStable,
      bool isReserveConsistent
    );
}
