"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchableFunctionLogic = void 0;
const ethers_1 = require("ethers");
const lodash_isequal_1 = __importDefault(require("lodash.isequal"));
const lodash_isequalwith_1 = __importDefault(require("lodash.isequalwith"));
const rxjs_1 = require("rxjs");
const utils_1 = require("../utils");
class WatchableFunctionLogic {
    constructor(name, calls$) {
        this.callHistory = [];
        this.name = name;
        calls$.subscribe((call) => this.callHistory.push(call));
    }
    atCall(index) {
        if (!this.getCall(index))
            throw new Error(`expected ${this.name} to have been called ${utils_1.humanizeTimes(index + 1)}, but it was called ${utils_1.humanizeTimes(this.getCallCount())}`);
        return new WatchableFunctionLogic(this.name, rxjs_1.of(this.getCall(index)));
    }
    getCall(index) {
        return this.callHistory[index];
    }
    calledWith(...expectedCallArgs) {
        return !!this.callHistory.find((call) => this.isDeepEqual(call.args, expectedCallArgs));
    }
    alwaysCalledWith(...expectedCallArgs) {
        const callWithOtherArgs = this.callHistory.find((call) => !this.isDeepEqual(call.args, expectedCallArgs));
        return this.getCalled() && !callWithOtherArgs;
    }
    calledOnceWith(...expectedCallArgs) {
        return this.getCalledOnce() && this.calledWith(...expectedCallArgs);
    }
    calledBefore(anotherWatchableContract) {
        return this.compareWatchableContractNonces(this, anotherWatchableContract, (thisNonce, anotherWatchableContractNonce) => thisNonce < anotherWatchableContractNonce);
    }
    alwaysCalledBefore(anotherWatchableContract) {
        var _a, _b;
        return ((_a = this.callHistory[this.getCallCount() - 1]) === null || _a === void 0 ? void 0 : _a.nonce) < ((_b = anotherWatchableContract.callHistory[0]) === null || _b === void 0 ? void 0 : _b.nonce);
    }
    calledAfter(anotherWatchableContract) {
        return this.compareWatchableContractNonces(this, anotherWatchableContract, (thisNonce, anotherWatchableContractNonce) => thisNonce > anotherWatchableContractNonce);
    }
    alwaysCalledAfter(anotherWatchableContract) {
        var _a, _b;
        return ((_a = this.callHistory[0]) === null || _a === void 0 ? void 0 : _a.nonce) > ((_b = anotherWatchableContract.callHistory[anotherWatchableContract.getCallCount() - 1]) === null || _b === void 0 ? void 0 : _b.nonce);
    }
    calledImmediatelyBefore(anotherWatchableContract) {
        return this.compareWatchableContractNonces(this, anotherWatchableContract, (thisNonce, anotherWatchableContractNonce) => thisNonce === anotherWatchableContractNonce - 1);
    }
    alwaysCalledImmediatelyBefore(anotherWatchableContract) {
        if (this.getCallCount() === 0 || this.getCallCount() != anotherWatchableContract.getCallCount())
            return false;
        return !this.callHistory.find((thisCall, index) => {
            return thisCall.nonce !== anotherWatchableContract.callHistory[index].nonce - 1;
        });
    }
    calledImmediatelyAfter(anotherWatchableContract) {
        return this.compareWatchableContractNonces(this, anotherWatchableContract, (thisNonce, anotherWatchableContractNonce) => thisNonce === anotherWatchableContractNonce + 1);
    }
    alwaysCalledImmediatelyAfter(anotherWatchableContract) {
        if (this.getCallCount() === 0 || this.getCallCount() != anotherWatchableContract.getCallCount())
            return false;
        return !this.callHistory.find((thisCall, index) => {
            return thisCall.nonce !== anotherWatchableContract.callHistory[index].nonce + 1;
        });
    }
    getName() {
        return this.name;
    }
    getCallCount() {
        return this.callHistory.length;
    }
    getCalled() {
        return this.getCallCount() > 0;
    }
    getCalledOnce() {
        return this.getCallCount() === 1;
    }
    getCalledTwice() {
        return this.getCallCount() === 2;
    }
    getCalledThrice() {
        return this.getCallCount() === 3;
    }
    reset() {
        this.callHistory = [];
    }
    compareWatchableContractNonces(watchablecontractA, watchablecontractB, comparison) {
        return !!watchablecontractA.callHistory.find((watchablecontractACall) => {
            return watchablecontractB.callHistory.find((watchablecontractBCall) => {
                return comparison(watchablecontractACall.nonce, watchablecontractBCall.nonce);
            });
        });
    }
    isDeepEqual(obj1, obj2) {
        return lodash_isequalwith_1.default(obj1, obj2, this.isEqualCustomizer.bind(this));
    }
    isEqualCustomizer(obj1, obj2) {
        if (ethers_1.BigNumber.isBigNumber(obj1)) {
            return obj1.eq(obj2);
        }
        if (ethers_1.BigNumber.isBigNumber(obj2)) {
            return obj2.eq(obj1);
        }
        const objectAndStruct = utils_1.getObjectAndStruct(obj1, obj2);
        if (objectAndStruct) {
            return lodash_isequal_1.default(objectAndStruct[0], utils_1.convertStructToPojo(objectAndStruct[1]));
        }
        return undefined;
    }
}
exports.WatchableFunctionLogic = WatchableFunctionLogic;
//# sourceMappingURL=watchable-function-logic.js.map