import { EVMResult } from '@nomiclabs/ethereumjs-vm/dist/evm/evm';
import { Observable } from 'rxjs';
import { ContractCall, ProgrammedReturnValue, WhenCalledWithChain } from '../index';
import { WatchableFunctionLogic } from '../logic/watchable-function-logic';
declare class ProgrammedAnswer {
    value?: any;
    shouldRevert: boolean;
    constructor(value?: any, shouldRevert?: boolean);
}
export declare class ProgrammableFunctionLogic extends WatchableFunctionLogic {
    protected encoder: (value: any) => string;
    protected defaultAnswer: ProgrammedAnswer | undefined;
    protected answerByIndex: {
        [index: number]: ProgrammedAnswer;
    };
    protected answerByArgs: {
        answer: ProgrammedAnswer;
        args: unknown[];
    }[];
    constructor(name: string, calls$: Observable<ContractCall>, results$: Observable<EVMResult>, encoder: (values?: ProgrammedReturnValue) => string);
    returns(value?: ProgrammedReturnValue): void;
    returnsAtCall(callIndex: number, value?: ProgrammedReturnValue): void;
    whenCalledWith(...args: unknown[]): WhenCalledWithChain;
    reverts(reason?: string): void;
    revertsAtCall(callIndex: number, reason?: string): void;
    reset(): void;
    private modifyAnswer;
    private getCallAnswer;
    private encodeValue;
    private encodeRevertReason;
}
export declare class SafeProgrammableContract extends ProgrammableFunctionLogic {
    protected defaultAnswer: ProgrammedAnswer;
    reset(): void;
}
export {};
