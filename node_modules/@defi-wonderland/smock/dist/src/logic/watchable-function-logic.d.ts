import { Observable } from 'rxjs';
import { ContractCall } from '../types';
export declare class WatchableFunctionLogic {
    protected name: string;
    protected callHistory: ContractCall[];
    constructor(name: string, calls$: Observable<ContractCall>);
    atCall(index: number): WatchableFunctionLogic;
    getCall(index: number): ContractCall;
    calledWith(...expectedCallArgs: unknown[]): boolean;
    alwaysCalledWith(...expectedCallArgs: unknown[]): boolean;
    calledOnceWith(...expectedCallArgs: unknown[]): boolean;
    calledBefore(anotherWatchableContract: WatchableFunctionLogic): boolean;
    alwaysCalledBefore(anotherWatchableContract: WatchableFunctionLogic): boolean;
    calledAfter(anotherWatchableContract: WatchableFunctionLogic): boolean;
    alwaysCalledAfter(anotherWatchableContract: WatchableFunctionLogic): boolean;
    calledImmediatelyBefore(anotherWatchableContract: WatchableFunctionLogic): boolean;
    alwaysCalledImmediatelyBefore(anotherWatchableContract: WatchableFunctionLogic): boolean;
    calledImmediatelyAfter(anotherWatchableContract: WatchableFunctionLogic): boolean;
    alwaysCalledImmediatelyAfter(anotherWatchableContract: WatchableFunctionLogic): boolean;
    getName(): string;
    getCallCount(): number;
    getCalled(): boolean;
    getCalledOnce(): boolean;
    getCalledTwice(): boolean;
    getCalledThrice(): boolean;
    protected reset(): void;
    private compareWatchableContractNonces;
    protected isDeepEqual(obj1: unknown, obj2: unknown): boolean;
    private isEqualCustomizer;
}
